name: Release and Publish

on:
  push:
    branches: [main]
    paths:
      - 'package.json'
      - 'lib/**'
      - 'bin/**'
      - 'scripts/**'
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major

jobs:
  check-version:
    runs-on: ubuntu-latest
    outputs:
      version_changed: ${{ steps.version_check.outputs.changed }}
      current_version: ${{ steps.version_check.outputs.version }}
      previous_version: ${{ steps.version_check.outputs.previous_version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Check version change
        id: version_check
        run: |
          # Get current version
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          
          # Check if version changed in this push
          if git diff HEAD^ HEAD --name-only | grep -q "package.json"; then
            PREVIOUS_VERSION=$(git show HEAD^:package.json | node -p "JSON.parse(require('fs').readFileSync('/dev/stdin', 'utf8')).version")
            echo "previous_version=$PREVIOUS_VERSION" >> $GITHUB_OUTPUT
            
            if [ "$CURRENT_VERSION" != "$PREVIOUS_VERSION" ]; then
              echo "changed=true" >> $GITHUB_OUTPUT
              echo "Version changed from $PREVIOUS_VERSION to $CURRENT_VERSION"
            else
              echo "changed=false" >> $GITHUB_OUTPUT
              echo "Version unchanged: $CURRENT_VERSION"
            fi
          else
            echo "changed=false" >> $GITHUB_OUTPUT
            echo "package.json not modified"
          fi

  test:
    runs-on: ubuntu-latest
    needs: check-version
    if: needs.check-version.outputs.version_changed == 'true' || github.event_name == 'workflow_dispatch'
    
    strategy:
      matrix:
        node-version: [16, 18, 20]
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm test

      - name: Run linting
        run: npm run lint

  version-bump:
    runs-on: ubuntu-latest
    needs: [check-version, test]
    if: github.event_name == 'workflow_dispatch'
    outputs:
      new_version: ${{ steps.bump.outputs.version }}
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Configure Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Bump version
        id: bump
        run: |
          # Bump version
          NEW_VERSION=$(npm version ${{ github.event.inputs.version_type }} --no-git-tag-version)
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
          
          # Commit version bump
          git add package.json
          git commit -m "chore: bump version to $NEW_VERSION"
          git push

  build:
    runs-on: ubuntu-latest
    needs: [check-version, test, version-bump]
    if: always() && (needs.check-version.outputs.version_changed == 'true' || needs.version-bump.result == 'success')
    outputs:
      version: ${{ steps.get_version.outputs.version }}
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Get version
        id: get_version
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Create package tarball
        run: npm pack

      - name: Upload package artifact
        uses: actions/upload-artifact@v3
        with:
          name: npm-package
          path: claude-code-companion-*.tgz

  generate-changelog:
    runs-on: ubuntu-latest
    needs: [check-version, build]
    if: always() && needs.build.result == 'success'
    outputs:
      changelog: ${{ steps.changelog.outputs.changelog }}
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate changelog
        id: changelog
        run: |
          # Get the version
          VERSION="${{ needs.build.outputs.version }}"
          PREVIOUS_VERSION="${{ needs.check-version.outputs.previous_version }}"
          
          if [ -z "$PREVIOUS_VERSION" ]; then
            # If no previous version, get last tag
            PREVIOUS_VERSION=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          fi
          
          echo "## Changes in v$VERSION" > changelog.md
          echo "" >> changelog.md
          
          if [ -n "$PREVIOUS_VERSION" ]; then
            echo "### Commits since $PREVIOUS_VERSION:" >> changelog.md
            echo "" >> changelog.md
            
            # Get commits since last version
            git log --oneline --pretty=format:"- %s (%h)" ${PREVIOUS_VERSION}..HEAD >> changelog.md || true
          else
            echo "### Initial release" >> changelog.md
            echo "" >> changelog.md
            echo "- Initial publication of claude-code-companion" >> changelog.md
          fi
          
          echo "" >> changelog.md
          echo "### Installation" >> changelog.md
          echo "" >> changelog.md
          echo '```bash' >> changelog.md
          echo "npm install -g claude-code-companion@$VERSION" >> changelog.md
          echo '```' >> changelog.md
          
          # Read changelog and set output
          CHANGELOG=$(cat changelog.md)
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Upload changelog
        uses: actions/upload-artifact@v3
        with:
          name: changelog
          path: changelog.md

  publish:
    runs-on: ubuntu-latest
    needs: [build, generate-changelog]
    if: always() && needs.build.result == 'success'
    environment: npm-publish
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org'

      - name: Install dependencies
        run: npm ci

      - name: Download package artifact
        uses: actions/download-artifact@v3
        with:
          name: npm-package

      - name: Publish to npm
        run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  create-release:
    runs-on: ubuntu-latest
    needs: [build, generate-changelog, publish]
    if: always() && needs.publish.result == 'success'
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download changelog
        uses: actions/download-artifact@v3
        with:
          name: changelog

      - name: Download package artifact
        uses: actions/download-artifact@v3
        with:
          name: npm-package

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ needs.build.outputs.version }}
          name: v${{ needs.build.outputs.version }}
          body_path: changelog.md
          files: claude-code-companion-*.tgz
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}